#!/usr/bin/env python
"""
My breakfast-time attempt at a script
to mimic the capabilities of IRAF's hedit

Proposed USAGE:
  fitshedit
        filename(s) [with wildcards]
        -e --ext     HDU extension
        -k --keyword KEYWORD=VALUE [this can be repeated]
        --dry_run    Show changes but don't commit them
        --verify     Ask for confirmation before updating fits file

Feedback is welcome!
"""
import sys
from argparse import ArgumentParser
from glob import glob
from astropy.io import fits
from utils import (
    getImageList,
    splitKeywordArgs
    )

# pylint: disable=invalid-name
# pylint: disable=redefined-outer-name

def argParse():
    """
    Parse the command line arguments
    """
    description = "A convenience script to edit fits headers"
    parser = ArgumentParser(description=description)
    parser.add_argument('filename',
                        help='Filename or wildcard list of filenames')
    parser.add_argument('-e',
                        '--ext',
                        type=int,
                        help='Extension of HDU to edit',
                        default=0,
                        dest='e')
    parser.add_argument('-k',
                        '--keyword',
                        help='Header keyword to edit. This can be used mutliple times',
                        action='append',
                        dest='k')
    parser.add_argument('--dry_run',
                        help='Show changes but do not commit them',
                        action='store_true')
    parser.add_argument('--verify',
                        help='Verify each file change manually before commiting',
                        action='store_true')
    return parser.parse_args()

def printStatus(header, keyword, kwargs, dry_run):
    """
    Print summary of this update
    """
    if dry_run:
        dr = '[DRY RUN] '
    else:
        dr = ''
    # updating
    if keyword in header:
        print('{0:s}Updating {1:s}={2:s} --> {3:s}'.format(dr,
                                                           str(keyword),
                                                           str(header[keyword]),
                                                           str(kwargs[keyword])))
    # inserting
    else:
        print('{0:s}Adding {1:s}={2:s}'.format(dr, keyword, kwargs[keyword]))

if __name__ == "__main__":
    args = argParse()
    # get the list of kwargs to edit
    kwargs = splitKeywordArgs(args.k)
    if len(kwargs) < 1:
        print('No header keywords to edit')
        sys.exit(1)
    # get the list of images
    image_list = getImageList(args.filename)
    # loop over all images
    for image in image_list:
        header = fits.getheader(image, ext=args.e)
        # loop over keywords
        for keyword in kwargs:
            # simulate?
            if not args.dry_run:
                printStatus(header, keyword, kwargs, args.dry_run)
                # verify?
                if not args.verify:
                    ver = 'y'
                else:
                    ver = input('Update header of {0:s}? (y/n): '.format(image))
                if ver.lower() == 'y':
                    with fits.open(image, mode="update") as filehandle:
                        filehandle[args.e].header[keyword] = kwargs[keyword]
                    print('{0:s} updated'.format(image))
                else:
                    print('Update skipped')
            else:
                printStatus(header, keyword, kwargs, args.dry_run)

